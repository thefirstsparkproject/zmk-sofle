#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

&soft_off { hold-time-ms = <2000>; };

/ {
    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <100>;
    };

    period: period {
        compatible = "zmk,behavior-tap-dance";
        label = "PERIOD";
        #binding-cells = <0>;
        bindings = <&kp DOT>, <&kp COLON>;
    };

    period_plus: period_plus {
        compatible = "zmk,behavior-tap-dance";
        label = "PERIOD_PLUS";
        #binding-cells = <0>;
        bindings = <&kp EXCL>, <&kp QMARK>;
    };

    comma: comma {
        compatible = "zmk,behavior-tap-dance";
        label = "COMMA";
        #binding-cells = <0>;
        bindings = <&kp COMMA>, <&kp SEMI>;
    };

    quote: quote {
        compatible = "zmk,behavior-tap-dance";
        label = "QUOTE";
        #binding-cells = <0>;
        bindings = <&kp SQT>, <&kp DQT>, <&kp GRAVE>;
    };

    division: division {
        compatible = "zmk,behavior-tap-dance";
        label = "DIVISION";
        #binding-cells = <0>;
        bindings = <&kp SLASH>, <&kp PERCENT>;
    };

    group_begin: group_begin {
        compatible = "zmk,behavior-tap-dance";
        label = "GROUP_BEGIN";
        #binding-cells = <0>;
        bindings = <&kp LPAR>, <&kp LBKT>, <&kp LBRC>;
    };

    group_end: group_end {
        compatible = "zmk,behavior-tap-dance";
        label = "GROUP_END";
        #binding-cells = <0>;
        bindings = <&kp RPAR>, <&kp RBKT>, <&kp RBRC>;
    };

    encoder_page: encoder_page {
        compatible = "zmk,behavior-sensor-rotate";
        label = "ENCODER_PAGE";
        #sensor-binding-cells = <0>;
        bindings = <&kp PAGE_DOWN>, <&kp PAGE_UP>;
    };

    bt_nav: bt_nav {
        compatible = "zmk,behavior-sensor-rotate";
        label = "BT_NAV";
        #sensor-binding-cells = <0>;
        bindings = <&bt BT_NXT>, <&bt BT_NXT>;
    };

    mouse_mode: mouse_mode {
        compatible = "zmk,behavior-tap-dance";
        label = "MOUSE_MODE";
        #binding-cells = <0>;
        bindings = <&kp M>, <&to 0>;
    };

    keyboard_mode: keyboard_mode {
        compatible = "zmk,behavior-tap-dance";
        label = "KEYBOARD_MODE";
        #binding-cells = <0>;
        bindings = <&kp V>, <&to 0>;
    };

    home_row_mod: home_row_mod {
        compatible = "zmk,behavior-hold-tap";
        label = "HOME_ROW_MOD";
        bindings = <&kp>, <&kp>;

        #binding-cells = <2>;
        tapping-term-ms = <200>;
        flavor = "balanced";
    };

    tap_hold_kp: tap_hold_kp {
        compatible = "zmk,behavior-hold-tap";
        label = "TAP_HOLD_KP";
        bindings = <&kp>, <&kp>;

        #binding-cells = <2>;
        flavor = "tap-preferred";
        tapping-term-ms = <200>;
    };

    sl_or_mo: sl_or_mo {
        compatible = "zmk,behavior-hold-tap";
        label = "SL_OR_MO";
        bindings = <&mo>, <&sl>;

        #binding-cells = <2>;
        tapping-term-ms = <200>;
        flavor = "balanced";
    };

    symbol_layer_access: symbol_layer_access {
        compatible = "zmk,behavior-tap-dance";
        label = "SYMBOL_LAYER_ACCESS";
        #binding-cells = <0>;
        bindings = <&sl_or_mo 0 0>, <&to 0>;
    };

    behaviors {
    };

    combos {
        compatible = "zmk,combos";

        softoff {
            bindings = <&soft_off>;
            key-positions = <14 28 40>;
        };
    };

    macros {
        compose_accent: compose_accent {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kt CAPS &sl 2>;
            label = "COMPOSE_ACCENT";
        };

        nav_pan: lclk_ctrl {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LSHFT &mkp MCLK>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&mkp MCLK &kp LSHFT>;

            label = "LCLK_CTRL";
        };

        nav_zoom: nav_zoom {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LCTRL &mkp MCLK>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&mkp MCLK &kp LCTRL>;

            label = "NAV_ZOOM";
        };

        ml_shift: ml_shift {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LSHFT &mkp LCLK>,
                <&macro_release>,
                <&mkp LCLK &kp LSHFT>;

            label = "ML_SHIFT";
        };

        ml_ctrl: ml_ctrl {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LCTRL &mkp LCLK>,
                <&macro_release>,
                <&mkp LCLK &kp LCTRL>;

            label = "ML_CTRL";
        };

        ml_alt: ml_alt {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LALT &mkp LCLK>,
                <&macro_release>,
                <&mkp LCLK &kp LCTRL>;

            label = "ML_ALT";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            bindings = <
&trans      &trans                    &trans                    &trans                 &trans                  &trans       &mmv MOVE_UP     &trans         &trans                 &trans                 &trans                &trans                    &trans
&trans      &kp Q                     &kp W                     &kp E                  &kp R                   &kp T        &mmv MOVE_DOWN   &kp Y          &kp U                  &kp I                  &kp O                 &kp P                     &trans
&kp ESC     &home_row_mod LEFT_WIN A  &home_row_mod LEFT_ALT S  &home_row_mod LCTRL D  &home_row_mod LSHIFT F  &kp G        &mmv MOVE_LEFT   &kp H          &home_row_mod RSHFT J  &home_row_mod RCTRL K  &home_row_mod RALT L  &home_row_mod RWIN UNDER  &kp ENTER
&kp TAB     &kp Z                     &kp X                     &kp C                  &kp K                   &kp B        &mmv MOVE_RIGHT  &kp N          &kp M                  &trans                 &trans                &trans                    &trans
&kp C_MUTE  &trans                    &trans                    &sl 3                  &symbol_layer_access    &kp SPACE    &mkp LCLK        &kp BACKSPACE  &key_repeat            &to 0                  &compose_accent       &to 6
            >;

            sensor-bindings = <&scroll_encoder>;
            display-name = "base_layer";
        };

        symbols {
            bindings = <
&trans  &trans                      &trans                       &trans                     &trans                               &trans                         &trans  &trans                                &trans                        &trans                     &trans                                  &trans                                   &trans
&trans  &kp N1                      &kp N2                       &kp N3                     &kp N4                               &kp N5                         &trans  &kp N6                                &kp N7                        &kp N8                     &kp N9                                  &kp N0                                   &trans
&trans  &tap_hold_kp PERCENT SLASH  &tap_hold_kp BACKSLASH STAR  &tap_hold_kp PLUS MINUS    &tap_hold_kp GREATER_THAN LESS_THAN  &kp EQUAL                      &trans  &tap_hold_kp LEFT_BRACKET LEFT_BRACE  &kp LS(LPAR)                  &kp LS(RPAR)               &tap_hold_kp RIGHT_BRACKET RIGHT_BRACE  &tap_hold_kp SINGLE_QUOTE DOUBLE_QUOTES  &trans
&trans  &trans                      &tap_hold_kp TILDE GRAVE     &tap_hold_kp AT_SIGN HASH  &tap_hold_kp CARET DOLLAR            &tap_hold_kp PIPE AMPERSAND    &trans  &trans                                &tap_hold_kp SEMICOLON COMMA  &tap_hold_kp COLON PERIOD  &tap_hold_kp QUESTION EXCLAMATION       &trans                                   &trans
&trans  &trans                      &trans                       &trans                     &trans                               &trans                         &trans  &trans                                &trans                        &trans                     &trans                                  &trans
            >;
        };

        accent {
            bindings = <
&trans  &trans       &trans         &trans     &trans   &trans       &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans       &trans         &trans     &trans   &trans       &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp LS(DQT)  &kp LS(CARET)  &kp GRAVE  &kp SQT  &kp COMMA    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans       &trans         &trans     &trans   &trans       &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans       &trans         &trans     &trans   &trans       &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        hub {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &sl 4   &trans    &trans  &to 6   &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &to 5   &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        fn {
            bindings = <
&trans  &trans                     &trans                     &trans                  &trans                       &trans    &trans  &trans  &trans                    &trans                   &trans                  &trans                  &trans
&trans  &kp F1                     &kp F2                     &kp F3                  &kp F4                       &trans    &trans  &trans  &kp F13                   &kp F14                  &kp F15                 &kp F16                 &trans
&trans  &home_row_mod LEFT_WIN F5  &home_row_mod LEFT_ALT F6  &home_row_mod LCTRL F7  &home_row_mod LEFT_SHIFT F8  &trans    &trans  &trans  &home_row_mod RSHIFT F17  &home_row_mod RCTRL F18  &home_row_mod RALT F19  &home_row_mod RWIN F20  &trans
&trans  &kp F9                     &kp F10                    &kp F11                 &kp F12                      &trans    &trans  &trans  &kp F21                   &kp F22                  &kp F23                 &kp F24                 &trans
&trans  &trans                     &trans                     &trans                  &trans                       &trans    &trans  &trans  &trans                    &trans                   &trans                  &trans
            >;
        };

        mouse_control {
            bindings = <
&trans  &trans    &trans    &trans     &trans     &trans            &trans  &trans     &trans             &trans            &trans             &trans            &trans
&trans  &trans    &trans    &trans     &trans     &trans            &trans  &trans     &mmv MOVE_X(-100)  &mmv MOVE_Y(100)  &mmv MOVE_Y(-100)  &mmv MOVE_X(100)  &trans
&trans  &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &msc SCRL_UP      &trans  &kp PG_UP  &mmv MOVE_LEFT     &mmv MOVE_DOWN    &mmv MOVE_UP       &mmv MOVE_RIGHT   &trans
&trans  &trans    &trans    &trans     &trans     &msc SCRL_DOWN    &trans  &kp PG_DN  &kp LEFT           &kp DOWN          &kp UP             &kp RIGHT         &trans
&trans  &trans    &trans    &mkp RCLK  &mkp MCLK  &mkp LCLK         &trans  &trans     &trans             &trans            &trans             &trans
            >;
        };

        hardware {
            bindings = <
&bootloader  &soft_off     &sys_reset    &none         &bt BT_CLR    &bt BT_CLR_ALL    &none  &none  &none            &none   &sys_reset  &soft_off  &bootloader
&none        &none         &none         &none         &none         &none             &none  &none  &none            &none   &none       &none      &none
&none        &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4      &none  &none  &rgb_ug RGB_TOG  &none   &none       &none      &none
&none        &none         &none         &none         &none         &none             &none  &none  &none            &none   &none       &none      &none
&none        &none         &none         &none         &none         &trans            &none  &none  &none            &trans  &none       &none
            >;

            sensor-bindings = <&bt_nav>;
            display-name = "hardware";
        };
    };
};
