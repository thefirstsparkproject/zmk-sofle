#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

&soft_off { hold-time-ms = <2000>; };

/ {
    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <100>;
    };

    period: period {
        compatible = "zmk,behavior-tap-dance";
        label = "PERIOD";
        #binding-cells = <0>;
        bindings = <&kp DOT>, <&kp COLON>;
    };

    period_plus: period_plus {
        compatible = "zmk,behavior-tap-dance";
        label = "PERIOD_PLUS";
        #binding-cells = <0>;
        bindings = <&kp EXCL>, <&kp QMARK>;
    };

    comma: comma {
        compatible = "zmk,behavior-tap-dance";
        label = "COMMA";
        #binding-cells = <0>;
        bindings = <&kp COMMA>, <&kp SEMI>;
    };

    quote: quote {
        compatible = "zmk,behavior-tap-dance";
        label = "QUOTE";
        #binding-cells = <0>;
        bindings = <&kp SQT>, <&kp DQT>, <&kp GRAVE>;
    };

    division: division {
        compatible = "zmk,behavior-tap-dance";
        label = "DIVISION";
        #binding-cells = <0>;
        bindings = <&kp SLASH>, <&kp PERCENT>;
    };

    group_begin: group_begin {
        compatible = "zmk,behavior-tap-dance";
        label = "GROUP_BEGIN";
        #binding-cells = <0>;
        bindings = <&kp LPAR>, <&kp LBKT>, <&kp LBRC>;
    };

    group_end: group_end {
        compatible = "zmk,behavior-tap-dance";
        label = "GROUP_END";
        #binding-cells = <0>;
        bindings = <&kp RPAR>, <&kp RBKT>, <&kp RBRC>;
    };

    encoder_page: encoder_page {
        compatible = "zmk,behavior-sensor-rotate";
        label = "ENCODER_PAGE";
        #sensor-binding-cells = <0>;
        bindings = <&kp PAGE_DOWN>, <&kp PAGE_UP>;
    };

    bt_nav: bt_nav {
        compatible = "zmk,behavior-sensor-rotate";
        label = "BT_NAV";
        #sensor-binding-cells = <0>;
        bindings = <&bt BT_NXT>, <&bt BT_NXT>;
    };

    mouse_mode: mouse_mode {
        compatible = "zmk,behavior-tap-dance";
        label = "MOUSE_MODE";
        #binding-cells = <0>;
        bindings = <&kp M>, <&to 0>;
    };

    keyboard_mode: keyboard_mode {
        compatible = "zmk,behavior-tap-dance";
        label = "KEYBOARD_MODE";
        #binding-cells = <0>;
        bindings = <&kp V>, <&to 0>;
    };

    home_row_mod: home_row_mod {
        compatible = "zmk,behavior-hold-tap";
        label = "HOME_ROW_MOD";
        bindings = <&kp>, <&kp>;

        #binding-cells = <2>;
        tapping-term-ms = <200>;
        flavor = "balanced";
    };

    behaviors {
    };

    combos {
        compatible = "zmk,combos";

        softoff {
            bindings = <&soft_off>;
            key-positions = <14 28 40>;
        };

        enter {
            bindings = <&kp ENTER>;
            key-positions = <22 23>;
        };

        escape {
            bindings = <&kp ESCAPE>;
            key-positions = <15 14>;
        };
    };

    macros {
        compose_accent: compose_accent {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kt CAPS &sl 0>;
            label = "COMPOSE_ACCENT";
        };

        nav_pan: lclk_ctrl {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LSHFT &mkp MCLK>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&mkp MCLK &kp LSHFT>;

            label = "LCLK_CTRL";
        };

        nav_zoom: nav_zoom {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LCTRL &mkp MCLK>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&mkp MCLK &kp LCTRL>;

            label = "NAV_ZOOM";
        };

        ml_shift: ml_shift {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LSHFT &mkp LCLK>,
                <&macro_release>,
                <&mkp LCLK &kp LSHFT>;

            label = "ML_SHIFT";
        };

        ml_ctrl: ml_ctrl {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LCTRL &mkp LCLK>,
                <&macro_release>,
                <&mkp LCLK &kp LCTRL>;

            label = "ML_CTRL";
        };

        ml_alt: ml_alt {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LALT &mkp LCLK>,
                <&macro_release>,
                <&mkp LCLK &kp LCTRL>;

            label = "ML_ALT";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            bindings = <
&trans      &trans                    &trans                    &trans                 &trans                  &trans       &mmv MOVE_UP     &trans         &trans                 &trans                 &trans                &trans                        &trans
&trans      &kp Q                     &kp W                     &kp E                  &kp R                   &kp T        &mmv MOVE_DOWN   &kp Y          &kp U                  &kp I                  &kp O                 &kp P                         &trans
&trans      &home_row_mod LEFT_WIN A  &home_row_mod LEFT_ALT S  &home_row_mod LCTRL D  &home_row_mod LSHIFT F  &kp G        &mmv MOVE_LEFT   &kp H          &home_row_mod RSHFT J  &home_row_mod RCTRL K  &home_row_mod RALT L  &home_row_mod RWIN SEMICOLON  &trans
&trans      &kp Z                     &kp X                     &kp C                  &kp K                   &kp B        &mmv MOVE_RIGHT  &kp N          &kp M                  &kp RS(UNDERSCORE)     &kp PERIOD            &kp SLASH                     &trans
&kp C_MUTE  &to 2                     &trans                    &sl 1                  &none                   &kp SPACE    &mkp LCLK        &kp BACKSPACE  &kp ENTER              &kp TAB                &compose_accent       &to 2
            >;

            sensor-bindings = <&encoder_page>;
            display-name = "base_layer";
        };

        layer_2 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        hardware {
            bindings = <
&bootloader  &soft_off     &sys_reset    &none         &bt BT_CLR    &bt BT_CLR_ALL    &none  &none  &none            &none  &sys_reset  &soft_off  &bootloader
&none        &none         &none         &none         &none         &none             &none  &none  &none            &none  &none       &none      &none
&none        &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4      &none  &none  &rgb_ug RGB_TOG  &none  &none       &none      &none
&none        &none         &none         &none         &none         &none             &none  &none  &none            &none  &none       &none      &none
&none        &none         &none         &none         &none         &trans            &none  &none  &none            &none  &none       &none
            >;

            sensor-bindings = <&bt_nav>;
            display-name = "hardware";
        };

        layer_3 {
            bindings = <
&trans  &trans  &trans    &trans     &trans         &trans           &trans  &trans  &trans        &trans        &trans    &trans  &trans
&trans  &trans  &trans    &trans     &kp LS(QMARK)  &trans           &trans  &trans  &trans        &trans        &trans    &trans  &trans
&trans  &trans  &kp SEMI  &kp COMMA  &kp PERIOD     &kp LS(COLON)    &trans  &trans  &kp LS(LPAR)  &kp LS(LBRC)  &kp LBKT  &trans  &trans
&trans  &trans  &trans    &trans     &kp LS(EXCL)   &trans           &trans  &trans  &kp LS(RPAR)  &kp LS(RBRC)  &kp RBKT  &trans  &trans
&trans  &trans  &trans    &trans     &trans         &trans           &trans  &trans  &trans        &trans        &trans    &trans
            >;
        };

        layer_4 {
            bindings = <
&trans  &trans         &trans        &trans      &trans        &trans          &trans  &trans         &trans    &trans       &trans     &trans        &trans
&trans  &trans         &trans        &trans      &trans        &trans          &trans  &trans         &trans    &trans       &trans     &trans        &trans
&trans  &kp FSLH       &kp LS(STAR)  &kp MINUS   &kp LS(PLUS)  &kp EQUAL       &trans  &kp LS(CARET)  &kp APOS  &kp LS(DQT)  &kp GRAVE  &kp LS(DLLR)  &trans
&trans  &kp LS(PRCNT)  &kp LS(LT)    &kp LS(GT)  &kp LS(PIPE)  &kp LS(AMPS)    &trans  &kp HOME       &trans    &trans       &trans     &kp END       &trans
&trans  &trans         &trans        &trans      &trans        &trans          &trans  &trans         &trans    &trans       &trans     &trans
            >;
        };

        layer_5 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp N1  &kp N2  &kp N3  &kp N4  &kp N5    &trans  &kp N6  &kp N7  &kp N8  &kp N9  &kp N0  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans    &trans         &trans         &trans         &trans          &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans    &trans         &trans         &trans         &trans          &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp BSLH  &kp LS(AT)     &kp LS(POUND)  &kp LS(DLLR)   &kp LS(AMPS)    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans    &kp LS(TILDE)  &kp GRAVE      &kp LS(CARET)  &kp LS(PIPE)    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans    &trans         &trans         &trans         &trans          &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        layer_7 {
            bindings = <
&trans  &trans         &trans        &trans      &trans         &trans          &trans  &trans         &trans        &trans        &trans    &trans  &trans
&trans  &trans         &trans        &trans      &trans         &trans          &trans  &trans         &trans        &trans        &trans    &trans  &trans
&trans  &kp GRAVE      &kp LS(EXCL)  &kp LS(AT)  &kp LS(POUND)  &kp LS(DLLR)    &trans  &kp LS(CARET)  &kp LS(AMPS)  &kp LS(PIPE)  &kp BSLH  &trans  &trans
&trans  &kp LS(TILDE)  &trans        &trans      &trans         &trans          &trans  &trans         &trans        &trans        &trans    &trans  &trans
&trans  &trans         &trans        &trans      &trans         &trans          &trans  &trans         &trans        &trans        &trans    &trans
            >;
        };
    };
};
